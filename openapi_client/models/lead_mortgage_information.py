# coding: utf-8

"""
    Engine by MoneyLion API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.58.0
    Contact: help@engine.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.mortgage_type import MortgageType
from openapi_client.models.occupancy_type import OccupancyType
from openapi_client.models.property_search_status import PropertySearchStatus
from openapi_client.models.property_status import PropertyStatus
from openapi_client.models.property_type import PropertyType
from openapi_client.models.purchase_status import PurchaseStatus
from openapi_client.models.refinance_type import RefinanceType
from typing import Optional, Set
from typing_extensions import Self

class LeadMortgageInformation(BaseModel):
    """
    LeadMortgageInformation
    """ # noqa: E501
    property_type: Optional[PropertyType] = Field(default=None, alias="propertyType")
    property_value: Optional[StrictInt] = Field(default=None, alias="propertyValue")
    mortgage_balance: Optional[StrictInt] = Field(default=None, alias="mortgageBalance")
    lender_name: Optional[StrictStr] = Field(default=None, alias="lenderName")
    has_fha_loan: Optional[StrictBool] = Field(default=None, alias="hasFHALoan")
    current_with_loan: Optional[StrictBool] = Field(default=None, alias="currentWithLoan")
    property_status: Optional[PropertyStatus] = Field(default=None, alias="propertyStatus")
    mortgage_type: Optional[MortgageType] = Field(default=None, alias="mortgageType")
    mortgage_amount: Optional[StrictInt] = Field(default=None, description="Amount the lead will borrow", alias="mortgageAmount")
    down_payment_amount: Optional[StrictInt] = Field(default=None, alias="downPaymentAmount")
    property_state: Optional[StrictStr] = Field(default=None, alias="propertyState")
    property_county: Optional[StrictStr] = Field(default=None, alias="propertyCounty")
    property_address1: Optional[StrictStr] = Field(default=None, description="Street address (primary address line)", alias="propertyAddress1")
    property_address2: Optional[StrictStr] = Field(default=None, description="Secondary address line", alias="propertyAddress2")
    property_zipcode: Optional[StrictStr] = Field(default=None, alias="propertyZipcode")
    property_city: Optional[StrictStr] = Field(default=None, alias="propertyCity")
    refinance_amount: Optional[StrictInt] = Field(default=None, description="Amount the lead will borrow for refinancing an existing mortgage", alias="refinanceAmount")
    cash_out_amount: Optional[StrictInt] = Field(default=None, description="Additional amount the lead will borrow against existing home equity in the case of refinance", alias="cashOutAmount")
    occupancy_type: Optional[OccupancyType] = Field(default=None, alias="occupancyType")
    refinance_type: Optional[RefinanceType] = Field(default=None, alias="refinanceType")
    property_search_status: Optional[PropertySearchStatus] = Field(default=None, alias="propertySearchStatus")
    num_units: Optional[StrictInt] = Field(default=None, description="The number of legal units on the property", alias="numUnits")
    closing_date: Optional[date] = Field(default=None, alias="closingDate")
    purchase_status: Optional[PurchaseStatus] = Field(default=None, alias="purchaseStatus")
    purchase_date: Optional[date] = Field(default=None, alias="purchaseDate")
    monthly_hoa_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of the HOA fee for the lead", alias="monthlyHoaFee")
    mortgage_company: Optional[StrictStr] = Field(default=None, description="The name of the company holding the lead's mortgage", alias="mortgageCompany")
    mortgage_escrow_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of escrow the lead pays", alias="mortgageEscrowAmount")
    __properties: ClassVar[List[str]] = ["propertyType", "propertyValue", "mortgageBalance", "lenderName", "hasFHALoan", "currentWithLoan", "propertyStatus", "mortgageType", "mortgageAmount", "downPaymentAmount", "propertyState", "propertyCounty", "propertyAddress1", "propertyAddress2", "propertyZipcode", "propertyCity", "refinanceAmount", "cashOutAmount", "occupancyType", "refinanceType", "propertySearchStatus", "numUnits", "closingDate", "purchaseStatus", "purchaseDate", "monthlyHoaFee", "mortgageCompany", "mortgageEscrowAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeadMortgageInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeadMortgageInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "propertyType": obj.get("propertyType"),
            "propertyValue": obj.get("propertyValue"),
            "mortgageBalance": obj.get("mortgageBalance"),
            "lenderName": obj.get("lenderName"),
            "hasFHALoan": obj.get("hasFHALoan"),
            "currentWithLoan": obj.get("currentWithLoan"),
            "propertyStatus": obj.get("propertyStatus"),
            "mortgageType": obj.get("mortgageType"),
            "mortgageAmount": obj.get("mortgageAmount"),
            "downPaymentAmount": obj.get("downPaymentAmount"),
            "propertyState": obj.get("propertyState"),
            "propertyCounty": obj.get("propertyCounty"),
            "propertyAddress1": obj.get("propertyAddress1"),
            "propertyAddress2": obj.get("propertyAddress2"),
            "propertyZipcode": obj.get("propertyZipcode"),
            "propertyCity": obj.get("propertyCity"),
            "refinanceAmount": obj.get("refinanceAmount"),
            "cashOutAmount": obj.get("cashOutAmount"),
            "occupancyType": obj.get("occupancyType"),
            "refinanceType": obj.get("refinanceType"),
            "propertySearchStatus": obj.get("propertySearchStatus"),
            "numUnits": obj.get("numUnits"),
            "closingDate": obj.get("closingDate"),
            "purchaseStatus": obj.get("purchaseStatus"),
            "purchaseDate": obj.get("purchaseDate"),
            "monthlyHoaFee": obj.get("monthlyHoaFee"),
            "mortgageCompany": obj.get("mortgageCompany"),
            "mortgageEscrowAmount": obj.get("mortgageEscrowAmount")
        })
        return _obj


