# coding: utf-8

"""
    Engine by MoneyLion API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.58.0
    Contact: help@engine.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class LeadPayout(BaseModel):
    """
    LeadPayout
    """ # noqa: E501
    lead_uuid: StrictStr = Field(description="The unique identifier for the associated lead. ", alias="leadUuid")
    booked_at: datetime = Field(description="The time that this payout to a supply partner was booked. ", alias="bookedAt")
    payout_in_cents: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The payout amount in cents made available to the supply partner. May be fractional. ", alias="payoutInCents")
    uuid: Optional[StrictStr] = Field(default=None, description="The unique identifier for the associated payout event. ")
    deleted_at: Optional[datetime] = Field(default=None, description="If a payout to a supply partner was revoked, this value will report the time that the payout was revoked. ", alias="deletedAt")
    financial_institution_name: Optional[StrictStr] = Field(default=None, description="The name of the associated financial institution. This value is subject to change, so `financialInstitutionUuid` should be used as a stable identifier. ", alias="financialInstitutionName")
    financial_institution_uuid: Optional[StrictStr] = Field(default=None, description="A unique identifier for the associated financial institution. Only present for event types associated with financial institutions. ", alias="financialInstitutionUuid")
    __properties: ClassVar[List[str]] = ["leadUuid", "bookedAt", "payoutInCents", "uuid", "deletedAt", "financialInstitutionName", "financialInstitutionUuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeadPayout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeadPayout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "leadUuid": obj.get("leadUuid"),
            "bookedAt": obj.get("bookedAt"),
            "payoutInCents": obj.get("payoutInCents"),
            "uuid": obj.get("uuid"),
            "deletedAt": obj.get("deletedAt"),
            "financialInstitutionName": obj.get("financialInstitutionName"),
            "financialInstitutionUuid": obj.get("financialInstitutionUuid")
        })
        return _obj


