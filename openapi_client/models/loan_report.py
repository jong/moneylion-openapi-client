# coding: utf-8

"""
    Engine by MoneyLion API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.58.0
    Contact: help@engine.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.financial_institution_loan_report import FinancialInstitutionLoanReport
from openapi_client.models.loan_probability import LoanProbability
from openapi_client.models.loan_purpose import LoanPurpose
from openapi_client.models.provided_credit_rating import ProvidedCreditRating
from openapi_client.models.state import State
from typing import Optional, Set
from typing_extensions import Self

class LoanReport(BaseModel):
    """
    LoanReport
    """ # noqa: E501
    uuid: StrictStr = Field(description="A unique identifier for this report.")
    annual_income: StrictInt = Field(description="The user's annual income in dollars.", alias="annualIncome")
    credit_rating: ProvidedCreditRating = Field(description="The user's credit score range.", alias="creditRating")
    total_debt: Optional[StrictInt] = Field(default=None, description="The user's total debt in dollars.", alias="totalDebt")
    count_of_derogatories: Optional[StrictInt] = Field(default=None, description="The number of derogatory accounts listed on the user's credit report.", alias="countOfDerogatories")
    state: Optional[State] = Field(default=None, description="The user's state of residence.")
    loan_purpose: Optional[LoanPurpose] = Field(default=None, description="The reason for the loan.", alias="loanPurpose")
    loan_amount: Optional[StrictInt] = Field(default=None, description="The size of the the loan.", alias="loanAmount")
    network_probabilities: List[LoanProbability] = Field(description="Probabilities for classes of loans, irrespective of financial institution.", alias="networkProbabilities")
    financial_insitutions: List[FinancialInstitutionLoanReport] = Field(description="Probabilities broken out for specific financial institutions.", alias="financialInsitutions")
    created_at: datetime = Field(description="When this report was created.", alias="createdAt")
    __properties: ClassVar[List[str]] = ["uuid", "annualIncome", "creditRating", "totalDebt", "countOfDerogatories", "state", "loanPurpose", "loanAmount", "networkProbabilities", "financialInsitutions", "createdAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoanReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in network_probabilities (list)
        _items = []
        if self.network_probabilities:
            for _item_network_probabilities in self.network_probabilities:
                if _item_network_probabilities:
                    _items.append(_item_network_probabilities.to_dict())
            _dict['networkProbabilities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in financial_insitutions (list)
        _items = []
        if self.financial_insitutions:
            for _item_financial_insitutions in self.financial_insitutions:
                if _item_financial_insitutions:
                    _items.append(_item_financial_insitutions.to_dict())
            _dict['financialInsitutions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoanReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "annualIncome": obj.get("annualIncome"),
            "creditRating": obj.get("creditRating"),
            "totalDebt": obj.get("totalDebt"),
            "countOfDerogatories": obj.get("countOfDerogatories"),
            "state": obj.get("state"),
            "loanPurpose": obj.get("loanPurpose"),
            "loanAmount": obj.get("loanAmount"),
            "networkProbabilities": [LoanProbability.from_dict(_item) for _item in obj["networkProbabilities"]] if obj.get("networkProbabilities") is not None else None,
            "financialInsitutions": [FinancialInstitutionLoanReport.from_dict(_item) for _item in obj["financialInsitutions"]] if obj.get("financialInsitutions") is not None else None,
            "createdAt": obj.get("createdAt")
        })
        return _obj


