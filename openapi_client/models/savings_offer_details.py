# coding: utf-8

"""
    Engine by MoneyLion API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.58.0
    Contact: help@engine.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.compounding_method import CompoundingMethod
from openapi_client.models.federal_insurance_type import FederalInsuranceType
from openapi_client.models.incentive_details import IncentiveDetails
from openapi_client.models.term_unit import TermUnit
from typing import Optional, Set
from typing_extensions import Self

class SavingsOfferDetails(BaseModel):
    """
    SavingsOfferDetails
    """ # noqa: E501
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    details: Optional[StrictStr] = None
    rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Annual interest rate")
    annual_percent_yield: Union[StrictFloat, StrictInt] = Field(alias="annualPercentYield")
    compounding_method: CompoundingMethod = Field(alias="compoundingMethod")
    introductory_period_months: Optional[StrictInt] = Field(default=None, alias="introductoryPeriodMonths")
    introductory_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="introductoryRate")
    minimum_deposit: Union[StrictFloat, StrictInt] = Field(alias="minimumDeposit")
    minimum_deposit_with_fees: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minimumDepositWithFees")
    monthly_fee: Union[StrictFloat, StrictInt] = Field(alias="monthlyFee")
    check_writing: Optional[StrictBool] = Field(default=None, description="Whether the account allows checks", alias="checkWriting")
    effective_as_of: datetime = Field(description="When the offer was last validated, formatted as yyyy-MM-ddTHH:mm:ss.SSSZZ", alias="effectiveAsOf")
    federal_insurance_type: Optional[FederalInsuranceType] = Field(default=None, description="The type of federal deposit insurance that applies to this offer, if it was provided by the financial institution. Could be one of `fdic` for the Federal Deposit Insurance Corporation, or `ncua` for the National Credit Union Administration. ", alias="federalInsuranceType")
    incentive_details: Optional[List[IncentiveDetails]] = Field(default=None, alias="incentiveDetails")
    cd_term_unit: Optional[TermUnit] = Field(default=None, alias="cdTermUnit")
    cd_term_length: Optional[StrictInt] = Field(default=None, alias="cdTermLength")
    __properties: ClassVar[List[str]] = ["name", "description", "details", "rate", "annualPercentYield", "compoundingMethod", "introductoryPeriodMonths", "introductoryRate", "minimumDeposit", "minimumDepositWithFees", "monthlyFee", "checkWriting", "effectiveAsOf", "federalInsuranceType", "incentiveDetails", "cdTermUnit", "cdTermLength"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SavingsOfferDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in incentive_details (list)
        _items = []
        if self.incentive_details:
            for _item_incentive_details in self.incentive_details:
                if _item_incentive_details:
                    _items.append(_item_incentive_details.to_dict())
            _dict['incentiveDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SavingsOfferDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "details": obj.get("details"),
            "rate": obj.get("rate"),
            "annualPercentYield": obj.get("annualPercentYield"),
            "compoundingMethod": obj.get("compoundingMethod"),
            "introductoryPeriodMonths": obj.get("introductoryPeriodMonths"),
            "introductoryRate": obj.get("introductoryRate"),
            "minimumDeposit": obj.get("minimumDeposit"),
            "minimumDepositWithFees": obj.get("minimumDepositWithFees"),
            "monthlyFee": obj.get("monthlyFee"),
            "checkWriting": obj.get("checkWriting"),
            "effectiveAsOf": obj.get("effectiveAsOf"),
            "federalInsuranceType": obj.get("federalInsuranceType"),
            "incentiveDetails": [IncentiveDetails.from_dict(_item) for _item in obj["incentiveDetails"]] if obj.get("incentiveDetails") is not None else None,
            "cdTermUnit": obj.get("cdTermUnit"),
            "cdTermLength": obj.get("cdTermLength")
        })
        return _obj


