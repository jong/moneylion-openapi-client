# coding: utf-8

"""
    Engine by MoneyLion API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.58.0
    Contact: help@engine.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.refinance_loan_type import RefinanceLoanType
from typing import Optional, Set
from typing_extensions import Self

class RefinanceLoanInformation(BaseModel):
    """
    RefinanceLoanInformation
    """ # noqa: E501
    account_number: Optional[StrictStr] = Field(default=None, description="The account number for a loan the lead is refinancing", alias="accountNumber")
    income_based_repayment: Optional[StrictBool] = Field(default=None, description="If the repayment is income-based for a loan the lead is refinancing", alias="incomeBasedRepayment")
    interest_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The interest rate for a loan the lead is refinancing", alias="interestRate")
    loan_amount: Optional[StrictInt] = Field(default=None, description="The loan amount for a loan the lead is refinancing", alias="loanAmount")
    loan_servicer: Optional[StrictStr] = Field(default=None, description="The name of a loan servicer of a loan the lead is refinancing", alias="loanServicer")
    loan_type: Optional[RefinanceLoanType] = Field(default=None, alias="loanType")
    next_payment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount the next payment will be on a loan the lead is refinancing", alias="nextPaymentAmount")
    next_payment_date: Optional[date] = Field(default=None, description="The next payment date for a loan the lead is refinancing", alias="nextPaymentDate")
    __properties: ClassVar[List[str]] = ["accountNumber", "incomeBasedRepayment", "interestRate", "loanAmount", "loanServicer", "loanType", "nextPaymentAmount", "nextPaymentDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RefinanceLoanInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RefinanceLoanInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountNumber": obj.get("accountNumber"),
            "incomeBasedRepayment": obj.get("incomeBasedRepayment"),
            "interestRate": obj.get("interestRate"),
            "loanAmount": obj.get("loanAmount"),
            "loanServicer": obj.get("loanServicer"),
            "loanType": obj.get("loanType"),
            "nextPaymentAmount": obj.get("nextPaymentAmount"),
            "nextPaymentDate": obj.get("nextPaymentDate")
        })
        return _obj


