# coding: utf-8

"""
    Engine by MoneyLion API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.58.0
    Contact: help@engine.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.credit_card_offer import CreditCardOffer
from openapi_client.models.loan_offer import LoanOffer
from openapi_client.models.mortgage_offer import MortgageOffer
from openapi_client.models.originator import Originator
from openapi_client.models.pending_response import PendingResponse
from openapi_client.models.savings_offer import SavingsOffer
from openapi_client.models.special_offer import SpecialOffer
from typing import Optional, Set
from typing_extensions import Self

class RateTable(BaseModel):
    """
    A `RateTable` customized to a `Lead` input
    """ # noqa: E501
    uuid: StrictStr = Field(description="Primary UUID for a `RateTable`")
    lead_uuid: StrictStr = Field(description="UUID of the associated `Lead`", alias="leadUuid")
    loan_amount: Optional[StrictInt] = Field(default=None, description="`Lead`'s provided loan amount at the time of `RateTable` creation", alias="loanAmount")
    embed_url: Optional[StrictStr] = Field(default=None, description="A URL with which to build an iframe to embed rate table offer results in your experience. Only available to channels with integrations configured in control center.", alias="embedUrl")
    partner_page_url: Optional[StrictStr] = Field(default=None, description="A partner page URL to send your user to see the rate table offer results. Only available to channels with integrations configured in control center.", alias="partnerPageUrl")
    credit_card_offers: List[CreditCardOffer] = Field(alias="creditCardOffers")
    loan_offers: List[LoanOffer] = Field(alias="loanOffers")
    mortgage_offers: List[MortgageOffer] = Field(alias="mortgageOffers")
    savings_offers: List[SavingsOffer] = Field(alias="savingsOffers")
    special_offers: List[SpecialOffer] = Field(alias="specialOffers")
    pending_originators: List[Originator] = Field(description="List of originators which have been queried, but have not responded yet. This list only contains loan originators, and should no longer be used", alias="pendingOriginators")
    pending_responses: List[PendingResponse] = Field(description="List of demand partners which have been queried, but have not responded yet. It is a guarantee that no offers will be added to the rate table after this list is empty", alias="pendingResponses")
    __properties: ClassVar[List[str]] = ["uuid", "leadUuid", "loanAmount", "embedUrl", "partnerPageUrl", "creditCardOffers", "loanOffers", "mortgageOffers", "savingsOffers", "specialOffers", "pendingOriginators", "pendingResponses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RateTable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in credit_card_offers (list)
        _items = []
        if self.credit_card_offers:
            for _item_credit_card_offers in self.credit_card_offers:
                if _item_credit_card_offers:
                    _items.append(_item_credit_card_offers.to_dict())
            _dict['creditCardOffers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in loan_offers (list)
        _items = []
        if self.loan_offers:
            for _item_loan_offers in self.loan_offers:
                if _item_loan_offers:
                    _items.append(_item_loan_offers.to_dict())
            _dict['loanOffers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mortgage_offers (list)
        _items = []
        if self.mortgage_offers:
            for _item_mortgage_offers in self.mortgage_offers:
                if _item_mortgage_offers:
                    _items.append(_item_mortgage_offers.to_dict())
            _dict['mortgageOffers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in savings_offers (list)
        _items = []
        if self.savings_offers:
            for _item_savings_offers in self.savings_offers:
                if _item_savings_offers:
                    _items.append(_item_savings_offers.to_dict())
            _dict['savingsOffers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in special_offers (list)
        _items = []
        if self.special_offers:
            for _item_special_offers in self.special_offers:
                if _item_special_offers:
                    _items.append(_item_special_offers.to_dict())
            _dict['specialOffers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pending_originators (list)
        _items = []
        if self.pending_originators:
            for _item_pending_originators in self.pending_originators:
                if _item_pending_originators:
                    _items.append(_item_pending_originators.to_dict())
            _dict['pendingOriginators'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pending_responses (list)
        _items = []
        if self.pending_responses:
            for _item_pending_responses in self.pending_responses:
                if _item_pending_responses:
                    _items.append(_item_pending_responses.to_dict())
            _dict['pendingResponses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RateTable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "leadUuid": obj.get("leadUuid"),
            "loanAmount": obj.get("loanAmount"),
            "embedUrl": obj.get("embedUrl"),
            "partnerPageUrl": obj.get("partnerPageUrl"),
            "creditCardOffers": [CreditCardOffer.from_dict(_item) for _item in obj["creditCardOffers"]] if obj.get("creditCardOffers") is not None else None,
            "loanOffers": [LoanOffer.from_dict(_item) for _item in obj["loanOffers"]] if obj.get("loanOffers") is not None else None,
            "mortgageOffers": [MortgageOffer.from_dict(_item) for _item in obj["mortgageOffers"]] if obj.get("mortgageOffers") is not None else None,
            "savingsOffers": [SavingsOffer.from_dict(_item) for _item in obj["savingsOffers"]] if obj.get("savingsOffers") is not None else None,
            "specialOffers": [SpecialOffer.from_dict(_item) for _item in obj["specialOffers"]] if obj.get("specialOffers") is not None else None,
            "pendingOriginators": [Originator.from_dict(_item) for _item in obj["pendingOriginators"]] if obj.get("pendingOriginators") is not None else None,
            "pendingResponses": [PendingResponse.from_dict(_item) for _item in obj["pendingResponses"]] if obj.get("pendingResponses") is not None else None
        })
        return _obj


