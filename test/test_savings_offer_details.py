# coding: utf-8

"""
    Engine by MoneyLion API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.58.0
    Contact: help@engine.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.savings_offer_details import SavingsOfferDetails

class TestSavingsOfferDetails(unittest.TestCase):
    """SavingsOfferDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SavingsOfferDetails:
        """Test SavingsOfferDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SavingsOfferDetails`
        """
        model = SavingsOfferDetails()
        if include_optional:
            return SavingsOfferDetails(
                name = '',
                description = '',
                details = '',
                rate = 1.337,
                annual_percent_yield = 1.337,
                compounding_method = 'annually',
                introductory_period_months = 56,
                introductory_rate = 1.337,
                minimum_deposit = 1.337,
                minimum_deposit_with_fees = 1.337,
                monthly_fee = 1.337,
                check_writing = True,
                effective_as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                federal_insurance_type = 'fdic',
                incentive_details = [
                    openapi_client.models.incentive_details.IncentiveDetails(
                        amount = 1.337, 
                        unit = 'usd', 
                        display = '', 
                        type = 'cash_back', )
                    ],
                cd_term_unit = 'day',
                cd_term_length = 56
            )
        else:
            return SavingsOfferDetails(
                annual_percent_yield = 1.337,
                compounding_method = 'annually',
                minimum_deposit = 1.337,
                monthly_fee = 1.337,
                effective_as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testSavingsOfferDetails(self):
        """Test SavingsOfferDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
