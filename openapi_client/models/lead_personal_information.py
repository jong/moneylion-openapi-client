# coding: utf-8

"""
    Engine by MoneyLion API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.58.0
    Contact: help@engine.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.citizenship_status import CitizenshipStatus
from openapi_client.models.education_level import EducationLevel
from openapi_client.models.lead_best_time_to_call import LeadBestTimeToCall
from openapi_client.models.state import State
from typing import Optional, Set
from typing_extensions import Self

class LeadPersonalInformation(BaseModel):
    """
    LeadPersonalInformation
    """ # noqa: E501
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    alias_first_name: Optional[StrictStr] = Field(default=None, description="The first name the lead uses as an alias", alias="aliasFirstName")
    alias_last_name: Optional[StrictStr] = Field(default=None, description="The last name the lead uses as an alias", alias="aliasLastName")
    email: Optional[Annotated[str, Field(strict=True)]] = None
    city: Optional[StrictStr] = None
    state: Optional[State] = None
    work_phone: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="workPhone")
    primary_phone: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="primaryPhone")
    best_time_to_call: Optional[LeadBestTimeToCall] = Field(default=None, alias="bestTimeToCall")
    address1: Optional[StrictStr] = Field(default=None, description="Street address (primary address line)")
    address2: Optional[StrictStr] = Field(default=None, description="Secondary address line")
    address_move_in_date: Optional[date] = Field(default=None, description="The date the lead moved into their current address", alias="addressMoveInDate")
    zipcode: Optional[Annotated[str, Field(strict=True)]] = None
    months_at_address: Optional[StrictInt] = Field(default=None, description="Number of months the provided address has been the lead's primary residence", alias="monthsAtAddress")
    drivers_license_number: Optional[StrictStr] = Field(default=None, alias="driversLicenseNumber")
    drivers_license_state: Optional[StrictStr] = Field(default=None, description="State in which the driver's license was issued", alias="driversLicenseState")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP address", alias="ipAddress")
    active_military: Optional[StrictBool] = Field(default=None, description="Whether the lead is currently in the military (not a veteran)", alias="activeMilitary")
    military_veteran: Optional[StrictBool] = Field(default=None, description="Whether the lead is a veteran (should not be used if the lead is active in the military)", alias="militaryVeteran")
    date_of_birth: Optional[date] = Field(default=None, alias="dateOfBirth")
    education_level: Optional[EducationLevel] = Field(default=None, alias="educationLevel")
    ssn: Optional[Annotated[str, Field(strict=True)]] = None
    citizenship_status: Optional[CitizenshipStatus] = Field(default=None, alias="citizenshipStatus")
    __properties: ClassVar[List[str]] = ["firstName", "lastName", "aliasFirstName", "aliasLastName", "email", "city", "state", "workPhone", "primaryPhone", "bestTimeToCall", "address1", "address2", "addressMoveInDate", "zipcode", "monthsAtAddress", "driversLicenseNumber", "driversLicenseState", "ipAddress", "activeMilitary", "militaryVeteran", "dateOfBirth", "educationLevel", "ssn", "citizenshipStatus"]

    @field_validator('email')
    def email_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9!#$%&\'*+\/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&\'*+\/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$/")
        return value

    @field_validator('work_phone')
    def work_phone_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^1?\d{10}$", value):
            raise ValueError(r"must validate the regular expression /^1?\d{10}$/")
        return value

    @field_validator('primary_phone')
    def primary_phone_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^1?\d{10}$", value):
            raise ValueError(r"must validate the regular expression /^1?\d{10}$/")
        return value

    @field_validator('zipcode')
    def zipcode_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{5}([-\s]\d{4})?$", value):
            raise ValueError(r"must validate the regular expression /^\d{5}([-\s]\d{4})?$/")
        return value

    @field_validator('ssn')
    def ssn_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?!\b(\d)\1+-(\d)\1+-(\d)\1+\b)(?!123-45-6789|219-09-9999|078-05-1120)(?!666|000|9\d{2})\d{3}-(?!00)\d{2}-(?!0{4})\d{4}$", value):
            raise ValueError(r"must validate the regular expression /^(?!\b(\d)\1+-(\d)\1+-(\d)\1+\b)(?!123-45-6789|219-09-9999|078-05-1120)(?!666|000|9\d{2})\d{3}-(?!00)\d{2}-(?!0{4})\d{4}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeadPersonalInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeadPersonalInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "aliasFirstName": obj.get("aliasFirstName"),
            "aliasLastName": obj.get("aliasLastName"),
            "email": obj.get("email"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "workPhone": obj.get("workPhone"),
            "primaryPhone": obj.get("primaryPhone"),
            "bestTimeToCall": obj.get("bestTimeToCall"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "addressMoveInDate": obj.get("addressMoveInDate"),
            "zipcode": obj.get("zipcode"),
            "monthsAtAddress": obj.get("monthsAtAddress"),
            "driversLicenseNumber": obj.get("driversLicenseNumber"),
            "driversLicenseState": obj.get("driversLicenseState"),
            "ipAddress": obj.get("ipAddress"),
            "activeMilitary": obj.get("activeMilitary"),
            "militaryVeteran": obj.get("militaryVeteran"),
            "dateOfBirth": obj.get("dateOfBirth"),
            "educationLevel": obj.get("educationLevel"),
            "ssn": obj.get("ssn"),
            "citizenshipStatus": obj.get("citizenshipStatus")
        })
        return _obj


