# coding: utf-8

"""
    Engine by MoneyLion API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.58.0
    Contact: help@engine.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.education_level import EducationLevel
from openapi_client.models.graduate_degree_type import GraduateDegreeType
from typing import Optional, Set
from typing_extensions import Self

class LeadEducationInformation(BaseModel):
    """
    LeadEducationInformation
    """ # noqa: E501
    education_level: Optional[EducationLevel] = Field(default=None, alias="educationLevel")
    graduate_degree_type: Optional[GraduateDegreeType] = Field(default=None, alias="graduateDegreeType")
    university_attended: Optional[StrictStr] = Field(default=None, description="Name of university where a lead received their undergraduate degree. A lookup service for possible universities is available from using the /leads/universities endpoint. To maximize returned offers, this string must match one of the names returned from the lookup. ", alias="universityAttended")
    university_ope_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="identification number used by the U.S. Department of Education's Office of Postsecondary Education (OPE) to identify schools that have Program Participation Agreements (PPA) so that its students are eligible to participate in Federal Student Financial Assistance programs under Title IV regulations. This is a 6-digit number followed by a 2-digit suffix used to identify branches, additional locations, and other entities that are part of the eligible institution.", alias="universityOpeId")
    graduation_date: Optional[date] = Field(default=None, description="Date the lead graudated from undergrad (YYYY-MM-DD)", alias="graduationDate")
    graduate_graduation_date: Optional[date] = Field(default=None, description="Lead's graduate school graduation date (YYYY-MM-DD)", alias="graduateGraduationDate")
    graduate_last_attended_date: Optional[date] = Field(default=None, description="Lead's last attended month/year for graduate school (YYYY-MM-DD)", alias="graduateLastAttendedDate")
    graduate_university_attended: Optional[StrictStr] = Field(default=None, description="Name of university where a lead received their graduate degree. A lookup service for possible universities is available from using the /leads/universities endpoint. To maximize returned offers, this string must match one of the names returned from the lookup. ", alias="graduateUniversityAttended")
    graduate_university_ope_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="identification number used by the U.S. Department of Education's Office of Postsecondary Education (OPE) to identify schools that have Program Participation Agreements (PPA) so that its students are eligible to participate in Federal Student Financial Assistance programs under Title IV regulations. This is a 6-digit number followed by a 2-digit suffix used to identify branches, additional locations, and other entities that are part of the eligible institution.", alias="graduateUniversityOpeId")
    undergraduate_graduation_date: Optional[date] = Field(default=None, description="Date the lead graduated from undergrad (YYYY-MM-DD).", alias="undergraduateGraduationDate")
    undergraduate_last_attended_date: Optional[date] = Field(default=None, description="Lead's last attended month/year for undergrad (YYYY-MM-DD)", alias="undergraduateLastAttendedDate")
    undergraduate_university_attended: Optional[StrictStr] = Field(default=None, description="Name of university where a lead received their undergraduate degree. A lookup service for possible universities is available from using the /leads/universities endpoint. To maximize returned offers, this string must match one of the names returned from the lookup. ", alias="undergraduateUniversityAttended")
    undergraduate_university_ope_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="identification number used by the U.S. Department of Education's Office of Postsecondary Education (OPE) to identify schools that have Program Participation Agreements (PPA) so that its students are eligible to participate in Federal Student Financial Assistance programs under Title IV regulations. This is a 6-digit number followed by a 2-digit suffix used to identify branches, additional locations, and other entities that are part of the eligible institution.", alias="undergraduateUniversityOpeId")
    __properties: ClassVar[List[str]] = ["educationLevel", "graduateDegreeType", "universityAttended", "universityOpeId", "graduationDate", "graduateGraduationDate", "graduateLastAttendedDate", "graduateUniversityAttended", "graduateUniversityOpeId", "undergraduateGraduationDate", "undergraduateLastAttendedDate", "undergraduateUniversityAttended", "undergraduateUniversityOpeId"]

    @field_validator('university_ope_id')
    def university_ope_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{6}[A-Za-z\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{6}[A-Za-z\d]{2}$/")
        return value

    @field_validator('graduate_university_ope_id')
    def graduate_university_ope_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{6}[A-Za-z\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{6}[A-Za-z\d]{2}$/")
        return value

    @field_validator('undergraduate_university_ope_id')
    def undergraduate_university_ope_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\d{6}[A-Za-z\d]{2}$", value):
            raise ValueError(r"must validate the regular expression /^\d{6}[A-Za-z\d]{2}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeadEducationInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeadEducationInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "educationLevel": obj.get("educationLevel"),
            "graduateDegreeType": obj.get("graduateDegreeType"),
            "universityAttended": obj.get("universityAttended"),
            "universityOpeId": obj.get("universityOpeId"),
            "graduationDate": obj.get("graduationDate"),
            "graduateGraduationDate": obj.get("graduateGraduationDate"),
            "graduateLastAttendedDate": obj.get("graduateLastAttendedDate"),
            "graduateUniversityAttended": obj.get("graduateUniversityAttended"),
            "graduateUniversityOpeId": obj.get("graduateUniversityOpeId"),
            "undergraduateGraduationDate": obj.get("undergraduateGraduationDate"),
            "undergraduateLastAttendedDate": obj.get("undergraduateLastAttendedDate"),
            "undergraduateUniversityAttended": obj.get("undergraduateUniversityAttended"),
            "undergraduateUniversityOpeId": obj.get("undergraduateUniversityOpeId")
        })
        return _obj


