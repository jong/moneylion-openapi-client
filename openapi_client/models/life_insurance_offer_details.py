# coding: utf-8

"""
    Engine by MoneyLion API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.58.0
    Contact: help@engine.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.carrier_decision_type import CarrierDecisionType
from openapi_client.models.medical_exam import MedicalExam
from openapi_client.models.package_type import PackageType
from openapi_client.models.term_unit import TermUnit
from typing import Optional, Set
from typing_extensions import Self

class LifeInsuranceOfferDetails(BaseModel):
    """
    LifeInsuranceOfferDetails
    """ # noqa: E501
    policy_amount: StrictInt = Field(description="Policy amount, in dollars", alias="policyAmount")
    term_length: Optional[StrictInt] = Field(default=None, alias="termLength")
    term_unit: Optional[TermUnit] = Field(default=None, alias="termUnit")
    monthly_premium_amount: Union[StrictFloat, StrictInt] = Field(description="Monthly premium amount, in dollars", alias="monthlyPremiumAmount")
    annual_premium_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Annual premium amount, in dollars", alias="annualPremiumAmount")
    semi_annual_premium_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Semi-annual premium amount, in dollars", alias="semiAnnualPremiumAmount")
    online_app_available: Optional[StrictBool] = Field(default=None, description="Online application is available", alias="onlineAppAvailable")
    no_medical_test: Optional[StrictBool] = Field(default=None, alias="noMedicalTest")
    package_type: Optional[PackageType] = Field(default=None, alias="packageType")
    recommended: Optional[StrictBool] = Field(default=None, description="Policy is recommended")
    medical_exam: Optional[MedicalExam] = Field(default=None, alias="medicalExam")
    policy_name: Optional[StrictStr] = Field(default=None, description="The name of policy", alias="policyName")
    carrier_decision_type: Optional[CarrierDecisionType] = Field(default=None, alias="carrierDecisionType")
    partner_quote_id: Optional[StrictStr] = Field(default=None, alias="partnerQuoteId")
    convert_to_permanent: Optional[StrictBool] = Field(default=None, alias="convertToPermanent")
    child_rider: Optional[StrictStr] = Field(default=None, alias="childRider")
    accelerated_death_benefit: Optional[StrictBool] = Field(default=None, alias="acceleratedDeathBenefit")
    waiver_of_premium: Optional[StrictStr] = Field(default=None, alias="waiverOfPremium")
    is_online_application: Optional[StrictBool] = Field(default=None, alias="isOnlineApplication")
    delivery_method: Optional[StrictStr] = Field(default=None, alias="deliveryMethod")
    exam_required: Optional[StrictStr] = Field(default=None, alias="examRequired")
    __properties: ClassVar[List[str]] = ["policyAmount", "termLength", "termUnit", "monthlyPremiumAmount", "annualPremiumAmount", "semiAnnualPremiumAmount", "onlineAppAvailable", "noMedicalTest", "packageType", "recommended", "medicalExam", "policyName", "carrierDecisionType", "partnerQuoteId", "convertToPermanent", "childRider", "acceleratedDeathBenefit", "waiverOfPremium", "isOnlineApplication", "deliveryMethod", "examRequired"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LifeInsuranceOfferDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LifeInsuranceOfferDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "policyAmount": obj.get("policyAmount"),
            "termLength": obj.get("termLength"),
            "termUnit": obj.get("termUnit"),
            "monthlyPremiumAmount": obj.get("monthlyPremiumAmount"),
            "annualPremiumAmount": obj.get("annualPremiumAmount"),
            "semiAnnualPremiumAmount": obj.get("semiAnnualPremiumAmount"),
            "onlineAppAvailable": obj.get("onlineAppAvailable"),
            "noMedicalTest": obj.get("noMedicalTest"),
            "packageType": obj.get("packageType"),
            "recommended": obj.get("recommended"),
            "medicalExam": obj.get("medicalExam"),
            "policyName": obj.get("policyName"),
            "carrierDecisionType": obj.get("carrierDecisionType"),
            "partnerQuoteId": obj.get("partnerQuoteId"),
            "convertToPermanent": obj.get("convertToPermanent"),
            "childRider": obj.get("childRider"),
            "acceleratedDeathBenefit": obj.get("acceleratedDeathBenefit"),
            "waiverOfPremium": obj.get("waiverOfPremium"),
            "isOnlineApplication": obj.get("isOnlineApplication"),
            "deliveryMethod": obj.get("deliveryMethod"),
            "examRequired": obj.get("examRequired")
        })
        return _obj


