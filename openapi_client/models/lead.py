# coding: utf-8

"""
    Engine by MoneyLion API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.58.0
    Contact: help@engine.tech
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.lead_action import LeadAction
from openapi_client.models.lead_action_type import LeadActionType
from openapi_client.models.lead_auto_insurance_information import LeadAutoInsuranceInformation
from openapi_client.models.lead_co_applicant_information import LeadCoApplicantInformation
from openapi_client.models.lead_credit_card_information import LeadCreditCardInformation
from openapi_client.models.lead_credit_information import LeadCreditInformation
from openapi_client.models.lead_education_information import LeadEducationInformation
from openapi_client.models.lead_employment_information import LeadEmploymentInformation
from openapi_client.models.lead_financial_information import LeadFinancialInformation
from openapi_client.models.lead_health_information import LeadHealthInformation
from openapi_client.models.lead_identification_information import LeadIdentificationInformation
from openapi_client.models.lead_legal_information import LeadLegalInformation
from openapi_client.models.lead_loan_information import LeadLoanInformation
from openapi_client.models.lead_mortgage_information import LeadMortgageInformation
from openapi_client.models.lead_personal_information import LeadPersonalInformation
from openapi_client.models.lead_savings_information import LeadSavingsInformation
from openapi_client.models.lead_session_information import LeadSessionInformation
from openapi_client.models.personal_reference_information import PersonalReferenceInformation
from openapi_client.models.refinance_loan_information import RefinanceLoanInformation
from typing import Optional, Set
from typing_extensions import Self

class Lead(BaseModel):
    """
    Lead
    """ # noqa: E501
    lead_provider_name: StrictStr = Field(description="Name of company which provided the lead", alias="leadProviderName")
    personal_information: Optional[LeadPersonalInformation] = Field(default=None, alias="personalInformation")
    personal_reference_information: Optional[PersonalReferenceInformation] = Field(default=None, alias="personalReferenceInformation")
    loan_information: Optional[LeadLoanInformation] = Field(default=None, alias="loanInformation")
    mortgage_information: Optional[LeadMortgageInformation] = Field(default=None, alias="mortgageInformation")
    credit_card_information: Optional[LeadCreditCardInformation] = Field(default=None, alias="creditCardInformation")
    savings_information: Optional[LeadSavingsInformation] = Field(default=None, alias="savingsInformation")
    credit_information: Optional[LeadCreditInformation] = Field(default=None, alias="creditInformation")
    financial_information: Optional[LeadFinancialInformation] = Field(default=None, alias="financialInformation")
    employment_information: Optional[LeadEmploymentInformation] = Field(default=None, alias="employmentInformation")
    legal_information: Optional[LeadLegalInformation] = Field(default=None, alias="legalInformation")
    education_information: Optional[LeadEducationInformation] = Field(default=None, alias="educationInformation")
    co_applicant_information: Optional[LeadCoApplicantInformation] = Field(default=None, alias="coApplicantInformation")
    health_information: Optional[LeadHealthInformation] = Field(default=None, alias="healthInformation")
    identification_information: Optional[LeadIdentificationInformation] = Field(default=None, alias="identificationInformation")
    auto_insurance_information: Optional[LeadAutoInsuranceInformation] = Field(default=None, alias="autoInsuranceInformation")
    refinance_loans: Optional[List[RefinanceLoanInformation]] = Field(default=None, alias="refinanceLoans")
    client_tags: Optional[Dict[str, List[StrictStr]]] = Field(default=None, description="Arbitrary key-values mappings to associate with a `Lead`. This field can be use to attach `subid`s to a `Lead`", alias="clientTags")
    session_information: Optional[LeadSessionInformation] = Field(default=None, alias="sessionInformation")
    lead_actions: Optional[List[LeadAction]] = Field(default=None, alias="leadActions")
    uuid: StrictStr = Field(description="Primary UUID for a `Lead`")
    company_uuid: StrictStr = Field(description="UUID for a company which created the `Lead`", alias="companyUUID")
    session_uuid: Optional[StrictStr] = Field(default=None, description="UUID used to link leads across verticals, unique per user per supply sub-account", alias="sessionUuid")
    device_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the lead's device.", alias="deviceId")
    referral_company_uuid: Optional[StrictStr] = Field(default=None, alias="referralCompanyUuid")
    tracking_uuid: Optional[StrictStr] = Field(default=None, alias="trackingUuid")
    is_test: StrictBool = Field(description="Whether a `Lead` was created using a test access token", alias="isTest")
    status: LeadActionType = Field(description="The furthest step of the funnel a `Lead` has reached")
    created_at: StrictStr = Field(alias="createdAt")
    updated_at: StrictStr = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = ["leadProviderName", "personalInformation", "personalReferenceInformation", "loanInformation", "mortgageInformation", "creditCardInformation", "savingsInformation", "creditInformation", "financialInformation", "employmentInformation", "legalInformation", "educationInformation", "coApplicantInformation", "healthInformation", "identificationInformation", "autoInsuranceInformation", "refinanceLoans", "clientTags", "sessionInformation", "leadActions", "uuid", "companyUUID", "sessionUuid", "deviceId", "referralCompanyUuid", "trackingUuid", "isTest", "status", "createdAt", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Lead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of personal_information
        if self.personal_information:
            _dict['personalInformation'] = self.personal_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of personal_reference_information
        if self.personal_reference_information:
            _dict['personalReferenceInformation'] = self.personal_reference_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loan_information
        if self.loan_information:
            _dict['loanInformation'] = self.loan_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mortgage_information
        if self.mortgage_information:
            _dict['mortgageInformation'] = self.mortgage_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_card_information
        if self.credit_card_information:
            _dict['creditCardInformation'] = self.credit_card_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of savings_information
        if self.savings_information:
            _dict['savingsInformation'] = self.savings_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credit_information
        if self.credit_information:
            _dict['creditInformation'] = self.credit_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of financial_information
        if self.financial_information:
            _dict['financialInformation'] = self.financial_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employment_information
        if self.employment_information:
            _dict['employmentInformation'] = self.employment_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of legal_information
        if self.legal_information:
            _dict['legalInformation'] = self.legal_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of education_information
        if self.education_information:
            _dict['educationInformation'] = self.education_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of co_applicant_information
        if self.co_applicant_information:
            _dict['coApplicantInformation'] = self.co_applicant_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of health_information
        if self.health_information:
            _dict['healthInformation'] = self.health_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identification_information
        if self.identification_information:
            _dict['identificationInformation'] = self.identification_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auto_insurance_information
        if self.auto_insurance_information:
            _dict['autoInsuranceInformation'] = self.auto_insurance_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in refinance_loans (list)
        _items = []
        if self.refinance_loans:
            for _item_refinance_loans in self.refinance_loans:
                if _item_refinance_loans:
                    _items.append(_item_refinance_loans.to_dict())
            _dict['refinanceLoans'] = _items
        # override the default output from pydantic by calling `to_dict()` of session_information
        if self.session_information:
            _dict['sessionInformation'] = self.session_information.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lead_actions (list)
        _items = []
        if self.lead_actions:
            for _item_lead_actions in self.lead_actions:
                if _item_lead_actions:
                    _items.append(_item_lead_actions.to_dict())
            _dict['leadActions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Lead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "leadProviderName": obj.get("leadProviderName"),
            "personalInformation": LeadPersonalInformation.from_dict(obj["personalInformation"]) if obj.get("personalInformation") is not None else None,
            "personalReferenceInformation": PersonalReferenceInformation.from_dict(obj["personalReferenceInformation"]) if obj.get("personalReferenceInformation") is not None else None,
            "loanInformation": LeadLoanInformation.from_dict(obj["loanInformation"]) if obj.get("loanInformation") is not None else None,
            "mortgageInformation": LeadMortgageInformation.from_dict(obj["mortgageInformation"]) if obj.get("mortgageInformation") is not None else None,
            "creditCardInformation": LeadCreditCardInformation.from_dict(obj["creditCardInformation"]) if obj.get("creditCardInformation") is not None else None,
            "savingsInformation": LeadSavingsInformation.from_dict(obj["savingsInformation"]) if obj.get("savingsInformation") is not None else None,
            "creditInformation": LeadCreditInformation.from_dict(obj["creditInformation"]) if obj.get("creditInformation") is not None else None,
            "financialInformation": LeadFinancialInformation.from_dict(obj["financialInformation"]) if obj.get("financialInformation") is not None else None,
            "employmentInformation": LeadEmploymentInformation.from_dict(obj["employmentInformation"]) if obj.get("employmentInformation") is not None else None,
            "legalInformation": LeadLegalInformation.from_dict(obj["legalInformation"]) if obj.get("legalInformation") is not None else None,
            "educationInformation": LeadEducationInformation.from_dict(obj["educationInformation"]) if obj.get("educationInformation") is not None else None,
            "coApplicantInformation": LeadCoApplicantInformation.from_dict(obj["coApplicantInformation"]) if obj.get("coApplicantInformation") is not None else None,
            "healthInformation": LeadHealthInformation.from_dict(obj["healthInformation"]) if obj.get("healthInformation") is not None else None,
            "identificationInformation": LeadIdentificationInformation.from_dict(obj["identificationInformation"]) if obj.get("identificationInformation") is not None else None,
            "autoInsuranceInformation": LeadAutoInsuranceInformation.from_dict(obj["autoInsuranceInformation"]) if obj.get("autoInsuranceInformation") is not None else None,
            "refinanceLoans": [RefinanceLoanInformation.from_dict(_item) for _item in obj["refinanceLoans"]] if obj.get("refinanceLoans") is not None else None,
            "clientTags": obj.get("clientTags"),
            "sessionInformation": LeadSessionInformation.from_dict(obj["sessionInformation"]) if obj.get("sessionInformation") is not None else None,
            "leadActions": [LeadAction.from_dict(_item) for _item in obj["leadActions"]] if obj.get("leadActions") is not None else None,
            "uuid": obj.get("uuid"),
            "companyUUID": obj.get("companyUUID"),
            "sessionUuid": obj.get("sessionUuid"),
            "deviceId": obj.get("deviceId"),
            "referralCompanyUuid": obj.get("referralCompanyUuid"),
            "trackingUuid": obj.get("trackingUuid"),
            "isTest": obj.get("isTest"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


